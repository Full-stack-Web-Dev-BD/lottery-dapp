U-Box (User Activity Box) Stories
Dev description
Actions
Admin actions
Action To do What
happens
Test
Create
reward
(add-rerwar
d)
Prepare the link to the reward
logo - link to the image and the
wallet address with tokens
(rewards)
Fill out the add-reward form
A Reward
document is
created in the
database with the
name and options
specified in the
form.
Go to the
change-reward
form
Select the Reward
by name and load
the data into the
form
Check if the data is
correct
Change
reward
Select the reward from the list
of rewards by name
Enter the reward data in the
form by clicking the "Choose"
button
Change the data
Click the "Change Reward"
button
The reward data is
changed according
to the changes
made in the form
Select the reward
again in the
change-reward
form and load the
data into the form
Check if the data is
correct
Adding the
Quest
Prepare:
Reward for the Quest
Group of users for whom the
Quest is intended
Available token pool (rewards)
in the Quest
Link that needs to be clicked to
complete the Quest.
Fill out the adding-quests form
Click "Add to Quest"
A Quest document
is created in the
database with the
options specified
in the form.
Go to the
change-quest form.
Select the Quest by
name and load the
data into the form
Check if the data is
correct.
Select the Quest in
the quest-list and
check if the link in
the Action column
is correct
Change the
Quest
Prepare the name of the Quest
you want to change.
The Quest data is
changed according
Select the Quest
again in the
change-quest form
Select the Quest from the
Quests list by name
Enter the Quest data in the
form by clicking the "Choose"
button
Change the data
Click the "Change the Quest"
button
to the changes
made in the form
and load the data
into the form.
Check if the data is
correct
Adding the
Cyclical
Quest
Prepare:
Reward for the Cyclical Quest
Group of users for whom the
Cyclical Quest is intended
Available token pool (rewards)
in the Cyclical Quest
Link that needs to be visited
(the Hook message is a form of
a click) to complete the
Cyclical Quest.
Fill out the adding-quests form
putting in the name the first
word “Cyclical” (for example
“Cyclical visit”, “Cyclical RVC
chart”)
Click "Add to Quest"
A Cyclical Quest
document is
created in the
database with the
options specified
in the form.
Go to the
change-quest form.
Select the Quest by
name and load the
data into the form
Check if the data is
correct.
Select the Quest in
the quest-list and
check if the link in
the Action column
is correct
Adding the
Surprise
Prepare:
Reward for the Quest
Group of users for whom the
Quest is intended
Available token pool (rewards)
in the Quest.
Fill out the adding-surprise
form
Click "Add to Surprise"
A Surprise
document is
created in the
database with the
options specified
in the form.
Go to the
surprise-list form (to
be done)
Check if the data is
correct
Check if a pop-up
appears for the
user to claim their
Surprise.
Generate
and view
the list of
rewards
Enter the parameters in the
selection filter in the quest-list
form
Apply the filter by clicking the
"Apply filters" button
Check the generated list of
quests
The quest-list
page displays a list
of quests
according to the
specified
parameters
Change all filter
parameters and
check the
correctness of the
generated list of
quests
Stop the
Quest
Select the quest from the
Quests list on the quest-list
page
The quest's status
changes from
Active to Inactive
Go to the
change-quest page
Click the "Stop the quest"
button
Select the quest by
name
Check if the Quest
status has the value
Inactive
Adding a
ready-made
message
Go to the send-message page
Fill out the form for the
ready-made message
Click Add Message
The ready-made
message
document is added
to the database
Go to the
send-message
page
Find the ready
message from the
list (by subject)
Load it into the form
Sending a
ready-made
message
Go to the send-message page
Find the ready-made message
from the list (by subject)
Load it into the form
Select the other parameters in
the form
Click Send Message
The message is
saved in the
database as a sent
message
document
Users have access
to sent message
documents in the
database
Check the sent
messages in the
Sent Messages list
on the
send-message
page
Sending an
individual
message
Fill out the message sending
form on the send-message
page
Set the Active/Inactive
parameter
Click Send Message
A sent message
document is
created in the
database
Check the sent
message in the
Sent Messages list
on the
send-message
page
Changing
the status of
a sent
message
Go to the send-message page
Find the message on the Sent
messages list
Click the Active/Inactive button
The status of the
sent message
document is
changed to Active
or Inactive
Check the status of
the message on the
Sent messages list
(the Active/Inactive
button will be
highlighted
accordingly. For
active messages,
the Active button
will be highlighted)
Checking
sent
messages
Go to the send-message page
Fill in the selection parameters
and click "Apply filters"
Check the messages on the
Sent Messages list
The
send-message
page displays a list
of messages
Check if the Sent
Messages list
shows messages
according to the
specified
parameters
Checking
the list of
withdrawals
Go to the withdrawals page
Enter desired parameters
Click Apply Filters
Review withdrawals on the list
The withdrawals
page shows a list
of withdrawals
according to the
specified
parameters.
Check if the list of
withdrawals shows
the withdrawals
according to the
specified
parameters.
Making a
withdrawal
Go to the withdrawals page
Find the desired withdrawal on
the list of withdrawals
Click the Withdraw action
button and confirm the
withdrawal
The status of the
withdrawal
changes to Done
Check if the status
of the withdrawal
(In progress, Done,
Rejected) has
changed on the list
of withdrawals.
Changing
the status of
a
withdrawal
Go to the withdrawals page
Find the desired withdrawal on
the list of withdrawals
Click the In progress, Done or
Rejected action button and
confirm the status change
The status of the
withdrawal
changes.
Check if the status
of the withdrawal
(In progress, Done,
Rejected) has
changed on the list
of withdrawals.
Creating a
group of
users
Go to the user-groups page
Fill out the form
Click Create
A User Group
document
containing the
group parameters
is created in the
database.
Go to Change the
Group of Users
Find the user group
by name on the list.
Changing
the group of
users
Go to Change the Group of
Users
Find the user group by name
on the list.
Upload the group parameters
by selecting Choose
Change the desired
parameters
Click Change
The parameters of
the Group of Users
change.
Find the user group
by name on the list.
Upload the group
parameters by
selecting Choose
Check if all
parameters match.
Viewing a
list of users
belonging to
a Group of
Users
Go to the users page
Find the user group by name
on the list and click Apply
Filters
View the list of portfolios
A list of users who
currently belong to
the Group of Users
is displayed.
Check if the
portfolios on the list
should indeed
belong to the Group
of Users.
Viewing a
list of users
Go to the users page
Enter desired parameters and
click Apply Filters
View the list of users
A list of users is
displayed.
Check if the users
on the list are
indeed in
accordance with the
specified
parameters.
Checking
withdrawals
of one user
Go to the users page, apply
filters and find the user on the
list.
Click See withdrawals.
The application will
automatically take us to the
withdrawals page with the
selected user's wallet option
and display their withdrawals.
The application will
automatically take
us to the
withdrawals page
with the selected
user's wallet
option and display
their withdrawals.
Check if the list
matches the
withdrawals made
by the user.
Checking
rewards of
one user
Go to the users page, apply
filters and find the user on the
list.
Click See Rewards.
The application will
automatically take us to the My
Rewards page for the selected
user's wallet and display their
rewards.
The application will
automatically take
us to the Rewards
page for the
selected user's
wallet and display
their rewards.
Enter the user's
wallet on the My
Rewards page.
Compare the
rewards lists.
Sending a
message to
one user
Go to the users page, apply
filters and find the user on the
list.
Click Message.
The application will
automatically take us to the
Messages page with the user's
wallet option.
The application will
automatically take
us to the
Messages page
with the user's
wallet option.
Check the
correctness of the
inserted wallet.
Suspending
/activating a
user
Go to the users page, apply
filters and find the user on the
list.
Click Activate/Suspend.
The application will
automatically take us to the
Messages page with the user's
wallet option.
The user's status
changes to Active
or Inactive.
Check the user's
status on the list.
User Actions
Action To do What
happens
Test
Creating a
User
Connect to their wallet by
clicking on "Connect" on the
first page or enter their wallet
address on the first page and
confirm it.
If there is no wallet
address in the
database, a new
User is created in
the database with
an "Active" status,
and a cookie is set
on their device.
If the user is in the
database, the
cookie on their
device is checked
(if it doesn't exist, it
is set).
Go to app.dexer.io
and check if the
connection icon
points to the User's
connection.
Making a
Withdrawal
Connect to their wallet
Go to the "my-rewards" page
Click on the "Withdraw" button
next to the reward and confirm
the withdrawal.
A withdrawal
document is
created with an "In
progress" status.
Check if the
withdrawal is on the
"My withdrawals"
list on the
"my-rewards" page.
Completing
a Quest
Go to the "quests" page
Check the list of quests.
Complete the quest.
A list of quests
available to the
user is displayed.
Verify the action
was successful
Check if the
application shows
the quests actually
available to the
user.
Completing
a Cyclical
Quest
Ensure that you have a Cookie
on your device and that you
are connected (icon on
app.dexer.io).
Complete cyclical quest.
The action is
recorded in the
database thanks to
the Cookie.
For example, the
Cyclical Quest
Check if the user
has been awarded
a reward for
completing the
cyclical quest.
"Cyclical visit"
sends a Hook each
time the user visits
the page with its
address (link in the
Cyclical Quest).
Sending a Hook is
similar to clicking
the link in the
Quest. The system
checks if the user
is entitled to a
reward (if it's his
first time on the
page today and
subsequent visits
don't count). If a
reward is due, it is
saved in the
database. An
endpoint must be
set up to receive
Hooks and pass
them on for
processing. A user
can complete the
cyclical quest only
once per 24 hours
(after completing
one cycle of the
quest the same
quest may be
completed after 24
hours).
Check if the user is
awarded only once
per 24h for the
Cyclical Quest. The
user may be
awarded for many
cyclical quests
every day but only
once for each
Cyclical Quest.
Checking
Messages
Go to the "messages" page
Select a message from the list.
Click "See more" to read the
message.
A list of messages
is displayed, and
clicking "See more"
displays the subject
and content of the
message.
Check if general
messages intended
for everyone and
messages sent only
to the specific user
are displayed.
Checking
the Surprise
list and
collecting
Go to the Surprise List page.
Check the list of rewards.
If there is a Surprise reward for
the user, click to collect the
reward in the pop-up.
The Surprise list is
displayed. The full
user address is not
shown in the list,
Assign a Surprise
reward to a specific
user.
Check if the
Surprise appears
the
Surprise.
only the first and
last three symbols.
If the user's
address is on the
list and the
Remaining time is
greater than 0 (the
user can collect the
reward), a Surprise
window appears
and clicking it will
collect the reward.
If the user collects
the reward, set
Remaining time to
0 to prevent them
from collecting the
reward multiple
times.
on the list and pops
up in an additional
pop-up window.
Collect the reward.
Check if the reward
is awarded to the
user in
"my-reward".
User Stories
Withdrawals
Persona Need Purpose
Dexer User who has
received rewards for
his activity
wants to withdraw his rewards from
his internal account on Dexer to his
own wallet on the blockchain
to have full control on his
digital assets - to be able to
transfer it or sell it at any
time.
Dexer user wants to see if ordered withdraw is
done
to control if the rewards
were properly transferred
into his account on the
blockchain.
Dexer user wants to see if withdraw is in
progress
to be sure that he properly
ordered a withdrawal.
Dexer user wants to see what rewards he can
withdraw
to decide about withdrawing.
Dexer user wants to see the list of his ordered
withdrawals
to see how many rewards
he has already received and
to control his withdrawals.
Dexer user wants to see the conditions of
withdrawal (ie minimum amount of
token, TGE date)
to check if withdrawal is
possible.
Dexer user wants to see the subject of
withdrawal (token name, NFT, …)
to be sure what he will
receive on his wallet on the
blockchain.
Admin (Dexer staff)
who controls users
withdrawals
wants to see the list of ordered
withdrawals selected by the status
(in progres, done, rejected), Time of
orders, Wallet address, Rewards,
and Amount (rewards)
to manually control and
make withdrawals to users
accounts on the blockchain.
Admin wants to change the status of
withdrawals
to organize his job and to
inform users about the
status.
Admin wants to send a message to the
Dexer User (simply “Please contact
office@dexer.io”)
in case the withdrawal is
rejected.
Admin wants to see the details of
withdrawal (token, amount, user
address, time of order)
to make proper transfers.
Admin wants to have copied or fulfilled
details of the transfer
to avoid mistakes and
quickly make transfers with
one/two clicks.
Manager (Dexer
staff) who controls
the process
wants to see the whole list of
withdrawals and filtered withdrawals
(by token, user address, amount,
time of order, status)
to control the process
(amount of withdrawals to
do, time, amount of users).
Manager wants to have ability to change the
status of withdrawal
to manage complaints.
Admin wants to make and have a list of
wallets where rewards are
maintained
to easy and quickly make
withdrawals and to avoid
mistakes in addresses.
Admin wants to have a list of ready made
messages (subject, text)
to quickly send a message
to the user.
Acceptance criteria
● Dexer User can see on “My reward” tab all his rewards (logo, symbol, name, quantity,
conditions to withdraw).
● Action button to withdraw is visible only for rewards that meet conditions to withdraw.
● Dexer User can not see the possibility to make withdrawal (action button is not
clickable) and can not make a withdrawal if the conditions for withdrawal are not met
(ie he did not collect minimum amount of tokens, it is before TGE Date)
● Dexer user can not make twice the same withdrawal - after ordering the withdrawal
● After ordering a withdrawal the withdrawal button is replaced by the information
“Withdrawal in progress”
● After completing the withdrawal the reward connected with the withdrawal is
vanishing from the tab “My rewards” and user can check the withdrawal on the list of
My withdrawals
● It must be clear for Dexer user in what stage of withdrawal he is: before ability to
withdraw (he has not met the conditions for withdrawal), ability to withdraw, ordered
withdrawal (Withdrawal in progress), Finished withdrawal, Rejected withdrawal (with
a message to the User).
● It must be easy for Admin to make ordered transfers - all data (token, amount, wallet
address) must be automatically copied to avoid mistakes. Making a transfer and
changing the status of withdrawal should not take more than 15 seconds.
● It must be easy list of withdrawals for Admin so he can easily check Finished
withdrawals and Withdrawals in progress (withdrawals colors according to the status)
● It must be easy for Admin to sort withdrawals by order time (from: time to: time),
status, user (wallet address), token
● Admin should have action buttons right on the list (Make transfer, Change the status,
Send a message)
Connecting (Users)
Persona Need Purpose
User wants to connect his wallet to book his activity and
receive rewards.
User wants to connect his wallet to registrate cookie on his
device and to monitor his
activity and to be rewarded
for them
User wants to connect his wallet to check his rewards, fulfill
Quests and make
withdrawals.
User wants to connect the wallet
using Metamask or other
popular wallets
to make it easy without
remembering wallet
addresses.
User wants to collect the wallet
inserting wallet address
to connect if Metamask is
not installed on the device.
Dexer wants the user to connect
the wallet
to create a cookie and
register user activity on
device (user do not need to
connect the wallet to
register his activity all the
time)
Dexer wants the user to connect
the wallet
to identify the user and let
him make withdrawals
Dexer wants the user to connect
the wallet
to create the user account in
the system (if connecting
with this wallet is for the first
time)
Admin wants to see and operate
user accounts
to manage the User Activity
Program (see statistics, add,
delete or suspend the user
accounts).
Dexer wants to register the IP
address
to prevent fraud and robots
Admin wants to see the rewards of
the user (My rewards tab)
to check the user activity
Admin wants to see the list of the
user withdrawals (link to
Withdrawals admin tab)
to check the user activity
Admin wants to send a message to
the user (similar like a
message in Withdrawals
tab)
to contact the user
Admin wants to create and use
user groups
to offer rewards or send
messages to specific group
of users.
Acceptance criteria
● It must be easy to connect via the “Connect” button or inserting the wallet address.
https://blog.spruceid.com/sign-in-with-ethereum-on-next-js-applications/ - tutorial to
sign in with wallet
● After connecting there should be a cookie created on the device. This cookie allows
the user to assign the activity of the device to the user. The user does not need to
connect with the wallet each time to collect his activity if the device has the cookie.
● If the connecting with the wallet is for the first time the new user account is created
● To the User account there are IP addresses from which the user was sending
requests.
● Dexer can manage the database of user accounts - see statistics (number of users,
number of new users in the defined period), find a user (by wallet address or IP
address), check the user activity (Quests, rewards, withdrawals)
● Dexer can create a list of user accounts with the same IP address (IP address,
number of user accounts, users wallets connected with this IP)
Completing Quests
Persona Need Purpose
User wants to complete a Quest to receive rewards.
User wants to read about the quest to decide about completing the quest.
User wants to see the parameters of the
quest (Reward, Description of the
reward, Quantity (ie number of
tokens), Remaining time, Task to do
(ie visit the website dexter.io),
Action button
to choose the quest he wants to
complete.
User wants to see if the system has
recorded completing the quest
to be sure about receiving the reward.
User wants to see how many the same
reward tokens he already has
to help him make the decision of
choosing the quest.
User wants to see information about daily
activity (ie visiting dexer.io)
to perform routine activities to receive
rewards (these activities are
measured via cookie and users do not
need to choose the quest).
Acceptance Criteria
● Rewards are assigned after completing the quest if the reward is still available (the
number of rewards and time is limited - only the first users who complete the quest
receive rewards)
● User should see only available quests (can not see completed quests, quests with
finished pool of rewards, expired quests, quests not available for his wallet)
● Quests are easy to complete (it is enough to click the link). The system record
clicking the link (visiting the website, claiming token)
● User can see his wallet address and control if he is connected.
● After completing the quest the user see the confirmation or information that it was not
possible to assign the reward (We are sorry. The reward pool has run out. Try
another quest.)
Adding Quests
Persona Need Purpose
Admin wants to add the Quest to offer this Quest to users
Admin wants to stop, change or
delete the Quest
in case of any error.
Admin wants to offer the quest to a
limited group of users (by
wallets, by holders of
specific tokens (ie quest for
to remunerate a special
group of users or the one
user and to have the
possibility of making
users who have less than
1.000 RVC tokens)
promotions to a wide group
of users.
Admin wants to make and use
predefined list of rewards
(token)
to add quests quickly and to
avoid mistakes
Messages
Persona Need Purpose
User wants to see messages to be informed about new
quests, promotions and
Dexer live.
Admin wants to contact all users
(we don’t have emails)
to inform about promotions,
and rewards.
Admin wants to send a message to
one user
to inform about withdrawals
and specific issues.
Admin wants to have ready-made
messages
to send messages quicker.
Admin wants to check sent
messages
to control the
communication with users.
Admin wants to send messages to
the specific group of users
to send information to the
group of users.
Acceptance criteria
● In the list of messages the user can see the time, the subject, the message
● Admin can prepare the message with the subject, and the body text (message)
● Admin can send the message to all users, defined group of users (by wallet address)
or a specific user (by wallet address)
● Admin can check and sort the correspondence by the time, the specific user or group
of users
Surprise list
Persona Need Purpose
User wants to check the surprise
list
to confirm if his wallet was
selected for surprise in the
past
Dexer wants to publish the surprise
list
to inform users about
missing opportunities and
encourage users to visit the
site frequently.
Acceptance criteria
● Surprise list inform users about Surprise rewards assigned now and in the past to
selected wallets
● Surprise are presented chronological (last on the top)
● The list consists of logo, symbol, name, amount, date (expiration of the reward), and
the wallet number
● Pagination is needed
TO DO
Create the backend using MongoDB and APIs (Hooks)
Connect the backend with the frontend
Test all admin/user actions and user stories